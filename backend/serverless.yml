service: serverless-recipes
# app and org for use with dashboard.serverless.com
app: serverless-recipes
org: deangilewicz

# Pin service to only deploy with a specific Serverless version
# frameworkVersion: "=X.X.X"

# where service will be deployed
provider:
  name: aws
  runtime: nodejs10.x
  stage: ${self:custom.currentStage}
  region: us-west-2
  profile: ${self:custom.profiles.dev}
  # cfnRole: ${self:custom.secrets.AWS_CRN_ROLE}

# add statements to the Lambda function's IAM Role
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - Fn::GetAtt: [RecipesTable, Arn]
        # - { "Fn::GetAtt": ["UsersTable", "Arn"] }
      # - { "Fn::GetAtt": ["RecipesTable", "Arn"] }
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# define and reference custom properties and values
custom:
  secrets: ${file(config/secrets.yml):${self:custom.currentStage}}
  defaultStage: dev
  currentStage: ${opt:stage, self:custom.defaultStage}
  profiles:
    dev: ${self:custom.secrets.AWS_IAM}
  userPoolName: serverless-recipes-user-pool-${self:custom.currentStage}
  userPoolClientName: serverless-recipes-user-pool-client-${self:custom.currentStage}
  usersTableName: r-users-${self:custom.currentStage}
  recipesTableName: r-recipes-${self:custom.currentStage}

# define service wide environment variables
environment:
  USER_TABLE_NAME: ${self:custom.usersTableName}
  RECIPES_TABLE_NAME: ${self:custom.recipesTableName}

# add packaging information here
package:
#  include:
#    - include-me.js
#    - include-me-dir/**
  exclude:
    - config/**

functions:
  getRecipes:
    handler: lambdas/recipes.getAll
    description: Get all recipes
    events:
      - http:
          path: api/recipes/getAll
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
#     - websocket: $connect
#     - s3: ${env:BUCKET}
#     - schedule: rate(10 minutes)
#     - sns: greeter-topic
#     - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#     - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#     - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#     - iot:
#          sql: "SELECT * FROM 'some_topic'"
#     - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#     - cloudwatchLog: '/aws/lambda/hello'
#     - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#     - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# CloudFormation resource templates
resources:
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/dynamodb-users.yml)}
  - ${file(resources/dynamodb-recipes.yml)}
  - ${file(resources/api-gateway-authorizer.yml)}
